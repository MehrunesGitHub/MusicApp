{"version":3,"sources":["./src/app/albums.service.ts","./src/environments/environment.ts","./src/app/music.service.ts","./src/app/songs.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/song/song.component.html","./src/app/song/song.component.ts","./src/app/music/music.component.ts","./src/app/music/music.component.html","./src/app/app.module.ts","./src/app/artist/artist.component.html","./src/app/artist/artist.component.ts","./src/app/album/album.component.html","./src/app/album/album.component.ts","./src/app/artists.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlbumsService {\n\n  private REST_API_SERVER = \"http://localhost:5000/albums\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendGetRequest(){\n    return this.httpClient.get(this.REST_API_SERVER);\n\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, forkJoin } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MusicService {\n\n  private REST_API_SERVER1 = \"http://localhost:5000/songs\";\n  private REST_API_SERVER2 = \"http://localhost:5000/artists\";\n  private REST_API_SERVER3 = \"http://localhost:5000/albums\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public requestDataFromMultipleSources(): Observable<any[]> {\n    let songs = this.httpClient.get(this.REST_API_SERVER1);\n    let artists = this.httpClient.get(this.REST_API_SERVER2);\n    let albums = this.httpClient.get(this.REST_API_SERVER3);\n    return forkJoin([songs, artists, albums]);\n    \n  }\n\n\n\n} \n\n","/* import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SongsService {\n\n  private REST_API_SERVER = \"http://localhost:5000/songs\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendGetRequest(){\n    return this.httpClient.get(this.REST_API_SERVER);\n\n  }\n} */\n\n\nimport { Injectable }   from '@angular/core';\nimport { HttpClient }   from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SongsService {\n\n  private REST_API_SERVER = \"http://localhost:5000/songs\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendGetRequest(){\n    return this.httpClient.get(this.REST_API_SERVER);\n\n  }\n} \n\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {MatSort} from '@angular/material/sort';\n\n\n\n\ndeclare var songs: any;\nconsole.log(\"this is pulled from custom.js and passed to angular \", songs);\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n\n\n\nexport class AppComponent {\n  title = 'MusicDB';\n\n\n\n\n  //Material Table Setting for columns and datasource\n  displayedColumns: string[] = ['artist', 'album', 'year_released', 'track', 'name'];\n  dataSource = new MatTableDataSource<SongElements>(ELEMENT_DATA);\n\n\n  //Material table sorting and pagination settings\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n\n \n ngOnInit() {\n \n\n    //Call the material table pagination, sorting and custom filteration\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    //Custom filter according to name column\n    this.dataSource.filterPredicate = (data:\n      {name: string}, filterValue: string) =>\n      data.name.trim().toLowerCase().indexOf(filterValue) !== -1;\n    \n  }\n  //Select input onchange function\n  onChange(getName)\n  {\n    // configure filter\n    \n    this.dataSource.filter = getName.trim().toLowerCase();\n  }\n}\n\n\n\n//Material Table Data Settings from custom.js\n\nexport interface SongElements {\n  track: number,\n  name: string,\n  album: string,\n  year_released: number,\n  artist: string\n}\n\n\nconst ELEMENT_DATA: SongElements[] = songs;","<div style=\"padding:30px;\" >\n  <h1>Chris's Music DB application | Material and Angular</h1>\n  <h2>3 <i><b>inline data sources</b></i> combined and sorting from custom.js file passed to angular</h2>\n  <p><span class=\"material-icons\">close</span> From localhost:5000 <span class=\"material-icons\">check</span>Full sorting <span class=\"material-icons\">check</span>Full relational data grouping <span class=\"material-icons\">close</span>No authorization tokens</p><br>\n<div> \n  <table  mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n\n    <!-- Artist Column -->\n    <ng-container matColumnDef=\"artist\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Artist Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.artist}} </td>\n    </ng-container>\n  \n    <!-- Album Column -->\n    <ng-container matColumnDef=\"album\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Album Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n  \n    <!-- Year Column -->\n    <ng-container matColumnDef=\"year_released\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Year Released </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.year_released}} </td>\n    </ng-container>\n  \n    <!-- Song Track Column -->\n    <ng-container matColumnDef=\"track\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Song Track #</th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.track}} </td>\n    </ng-container>\n\n    <!-- Song Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Song Name</th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n  \n    <!-- <mat-paginator [pageSizeOptions]=\"[10]\" showFirstLastButtons></mat-paginator> -->\n    \n  </div>\n  <br>\n  <div><mat-paginator [pageSizeOptions]=\"[10]\" showFirstLastButtons></mat-paginator></div>\n  <br>  <br>\n<h2>Individual angular service calls to retrieve <i><b>external data sources</b></i></h2>\n<p><span class=\"material-icons\">check</span> From localhost:5000 <span class=\"material-icons\">close</span>Full sorting <span class=\"material-icons\">close</span>Full relational data grouping <span class=\"material-icons\">close</span>No authorization tokens</p><br>\n<div> \n\n  <mat-tab-group [color]=\"'accent'\" [backgroundColor]=\"'primary'\">\n    <mat-tab label=\"Albums from localhost:5000\"> <app-album></app-album></mat-tab>\n    <mat-tab label=\"Artists from localhost:5000\"> <app-artist></app-artist></mat-tab>\n    <mat-tab label=\"Songs from localhost:5000\"> <app-song></app-song> </mat-tab>\n  </mat-tab-group>\n</div>\n","<div style=\"padding: 13px;\">\n    <mat-spinner *ngIf=\"songsList.length === 0\"></mat-spinner>\n\n    <mat-card *ngFor=\"let songs of songsList\" >\n        <mat-card-header>\n            <mat-card-title>Track #{{songs.track}} | </mat-card-title>\n        </mat-card-header>\n        <mat-card-content><b>{{songs.name}}</b>\n    </mat-card-content><br>\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { SongsService } from '../songs.service';\n\n@Component({\n  selector: 'app-song',\n  templateUrl: './song.component.html',\n  styleUrls: ['./song.component.css']\n})\nexport class SongComponent implements OnInit {\n\n  songsList = [];\n\n  constructor(private SongsService: SongsService) { }\n\n  ngOnInit() {\n\n    this.SongsService.sendGetRequest().subscribe((songs: any[])=>{\n      //console.log(songs);\n      this.songsList = songs;\n    })  \n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MusicService } from '../music.service';\n\n@Component({\n  selector: 'app-music',\n  templateUrl: './music.component.html',\n  styleUrls: ['./music.component.css']\n})\n\nexport class MusicComponent implements OnInit {\n\n  musicList = [];\n\n  constructor(private MusicService: MusicService) { }\n\n\n  ngOnInit() {\n\n    this.MusicService.requestDataFromMultipleSources().subscribe((music: any[])=>{\n      //console.log(\"music \", music);\n      this.musicList = music;\n      var newvar = music;\n      //console.log(\"music 2\", newvar);\n\n    })  \n  }\n\n}","<p>music works!</p>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n//Material Table Modules\nimport {MatTableModule} from '@angular/material/table';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatSortModule} from '@angular/material/sort';\n//Material Select Input and Realted Important Modules\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport { ArtistComponent } from './artist/artist.component';\nimport { AlbumComponent } from './album/album.component';\nimport { SongComponent } from './song/song.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MusicComponent } from './music/music.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatIconModule} from '@angular/material/icon';\n\n\n\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ArtistComponent,\n    AlbumComponent,\n    SongComponent,\n    MusicComponent,\n\n\n\n    \n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    HttpClientModule,\n    MatIconModule,\n    \n    \n    MatFormFieldModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTabsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div style=\"padding: 13px;\">\n    <mat-spinner *ngIf=\"artistsList.length === 0\"></mat-spinner>\n\n    <mat-card *ngFor=\"let artists of artistsList\">\n        <mat-card-header>\n            <mat-card-title><b>{{artists.name}}</b> </mat-card-title>\n        </mat-card-header><br>\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ArtistsService } from '../artists.service';\n\n@Component({\n  selector: 'app-artist',\n  templateUrl: './artist.component.html',\n  styleUrls: ['./artist.component.css']\n})\nexport class ArtistComponent implements OnInit {\n\n  artistsList = [];\n\n  constructor(private ArtistsService: ArtistsService) { }\n\n  ngOnInit() {\n\n    this.ArtistsService.sendGetRequest().subscribe((artists: any[])=>{\n     // console.log(artists);\n      this.artistsList = artists;\n    })  \n  }\n\n}","<div style=\"padding: 13px;\">\n  <mat-spinner *ngIf=\"albumsList.length === 0\"></mat-spinner>\n\n  <mat-card *ngFor=\"let albums of albumsList\">\n      <mat-card-header>\n          <mat-card-title><b>{{albums.name}}</b> | </mat-card-title>\n          <mat-card-title>Released: {{albums.year_released}} </mat-card-title>\n      </mat-card-header><br>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AlbumsService } from '../albums.service';\n\n@Component({\n  selector: 'app-album',\n  templateUrl: './album.component.html',\n  styleUrls: ['./album.component.css']\n})\nexport class AlbumComponent implements OnInit {\n\n  albumsList = [];\n\n  constructor(private AlbumsService: AlbumsService) { }\n\n  ngOnInit() {\n\n    this.AlbumsService.sendGetRequest().subscribe((albums: any[])=>{\n     //console.log('albums ', albums);\n      this.albumsList = albums;\n    })  \n  }\n\n}\n\n  /*    let list = [albums]\n      // Ascending\n      list.sort((a,b) => 0 - (a > b ? -1 : 1));\n      console.log('Ascending ', list);\n\n      // Descending\n      list.sort((a,b) => 0 - (a> b ? 1 : -1));\n      console.log('Descending ',list);\n\n\n\n      let arr = [albums].reverse(); \n      console.log(\"Reversed array is : \" + arr );\n\n\n      })  \n      \n      let values = [\"B_Value\", \"C_Value\", \"A_Value\"];\n\n      // Ascending\n      values.sort((a,b) => 0 - (a > b ? -1 : 1));\n      console.log(values);\n\n      // Descending\n      values.sort((a,b) => 0 - (a > b ? 1 : -1));\n      console.log(values); */\n\n\n\n\n\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArtistsService {\n\n  private REST_API_SERVER = \"http://localhost:5000/artists\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  public sendGetRequest(){\n    return this.httpClient.get(this.REST_API_SERVER);\n\n  }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}